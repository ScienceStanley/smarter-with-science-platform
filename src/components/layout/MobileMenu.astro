---
/**
 * MobileMenu.astro
 * Mobile navigation menu with smooth animations
 * 
 * Features:
 * - Slide-in drawer from right
 * - Backdrop overlay
 * - Smooth transitions
 * - Accessible with focus trap
 */

export interface Props {
  items: Array<{
    label: string;
    href: string;
  }>;
  class?: string;
}

const { items, class: className } = Astro.props;
---

<div class={className}>
  <!-- Menu Button -->
  <button
    id="mobile-menu-button"
    class="relative w-10 h-10 flex items-center justify-center text-text-bright focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 focus:ring-offset-background rounded"
    aria-label="Toggle menu"
    aria-expanded="false"
    aria-controls="mobile-menu"
  >
    <span class="sr-only">Open menu</span>
    <div class="w-6 h-5 relative flex flex-col justify-between">
      <span class="menu-line top"></span>
      <span class="menu-line middle"></span>
      <span class="menu-line bottom"></span>
    </div>
  </button>

  <!-- Mobile Menu Overlay -->
  <div
    id="mobile-menu-overlay"
    class="fixed inset-0 bg-background/80 backdrop-blur-sm z-40 opacity-0 pointer-events-none transition-opacity duration-300"
    aria-hidden="true"
  ></div>

  <!-- Mobile Menu Panel -->
  <nav
    id="mobile-menu"
    class="fixed top-0 right-0 bottom-0 w-full max-w-sm bg-surface border-l border-border z-50 transform translate-x-full transition-transform duration-300 ease-out"
    aria-label="Mobile navigation"
  >
    <div class="flex flex-col h-full">
      <!-- Header -->
      <div class="flex items-center justify-between p-6 border-b border-border">
        <span class="text-lg font-space-grotesk font-medium text-text-bright">Menu</span>
        <button
          id="mobile-menu-close"
          class="w-10 h-10 flex items-center justify-center text-text hover:text-text-bright transition-colors focus:outline-none focus:ring-2 focus:ring-primary rounded"
          aria-label="Close menu"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>

      <!-- Navigation Links -->
      <div class="flex-1 overflow-y-auto py-6">
        <ul class="space-y-1 px-6">
          {items.map((item) => (
            <li>
              <a
                href={item.href}
                class="block py-3 text-lg text-text hover:text-text-bright transition-colors relative group"
              >
                <span class="relative z-10">{item.label}</span>
                <span class="absolute inset-0 bg-primary/10 scale-x-0 group-hover:scale-x-100 transition-transform duration-200 origin-left rounded"></span>
              </a>
            </li>
          ))}
        </ul>

        <!-- CTA Button -->
        <div class="mt-8 px-6">
          <a
            href="/join"
            class="block w-full bg-primary text-background px-6 py-3 rounded font-medium text-center hover:bg-primary/90 transition-colors"
          >
            Join the Movement
          </a>
        </div>
      </div>

      <!-- Footer -->
      <div class="p-6 border-t border-border">
        <div class="flex gap-4 justify-center">
          <a href="https://github.com/smarter-with-science" class="text-text hover:text-primary transition-colors" aria-label="GitHub">
            <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
            </svg>
          </a>
          <a href="https://twitter.com/smarterscience" class="text-text hover:text-primary transition-colors" aria-label="Twitter">
            <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
              <path d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z"/>
            </svg>
          </a>
        </div>
      </div>
    </div>
  </nav>
</div>

<style>
  /* Hamburger menu animation */
  .menu-line {
    @apply w-full h-0.5 bg-current transition-all duration-300 ease-out absolute left-0;
  }
  
  .menu-line.top {
    @apply top-0;
  }
  
  .menu-line.middle {
    @apply top-1/2 -translate-y-1/2;
  }
  
  .menu-line.bottom {
    @apply bottom-0;
  }
  
  /* Active state */
  #mobile-menu-button[aria-expanded="true"] .menu-line.top {
    @apply top-1/2 -translate-y-1/2 rotate-45;
  }
  
  #mobile-menu-button[aria-expanded="true"] .menu-line.middle {
    @apply opacity-0 scale-x-0;
  }
  
  #mobile-menu-button[aria-expanded="true"] .menu-line.bottom {
    @apply bottom-1/2 translate-y-1/2 -rotate-45;
  }
  
  /* Open state */
  .mobile-menu-open #mobile-menu-overlay {
    @apply opacity-100 pointer-events-auto;
  }
  
  .mobile-menu-open #mobile-menu {
    @apply translate-x-0;
  }
  
  /* Prevent body scroll when menu is open */
  .mobile-menu-open {
    @apply overflow-hidden;
  }
</style>

<script>
  // Mobile menu functionality
  const menuButton = document.getElementById('mobile-menu-button');
  const closeButton = document.getElementById('mobile-menu-close');
  const overlay = document.getElementById('mobile-menu-overlay');
  const menu = document.getElementById('mobile-menu');
  const menuLinks = menu?.querySelectorAll('a');
  
  let isOpen = false;
  
  function openMenu() {
    isOpen = true;
    document.body.classList.add('mobile-menu-open');
    menuButton?.setAttribute('aria-expanded', 'true');
    overlay?.setAttribute('aria-hidden', 'false');
    menu?.focus();
    
    // Trap focus
    const focusableElements = menu?.querySelectorAll(
      'a, button, [tabindex]:not([tabindex="-1"])'
    );
    if (focusableElements && focusableElements.length > 0) {
      (focusableElements[0] as HTMLElement).focus();
    }
  }
  
  function closeMenu() {
    isOpen = false;
    document.body.classList.remove('mobile-menu-open');
    menuButton?.setAttribute('aria-expanded', 'false');
    overlay?.setAttribute('aria-hidden', 'true');
    menuButton?.focus();
  }
  
  // Toggle menu
  menuButton?.addEventListener('click', () => {
    if (isOpen) {
      closeMenu();
    } else {
      openMenu();
    }
  });
  
  // Close menu
  closeButton?.addEventListener('click', closeMenu);
  overlay?.addEventListener('click', closeMenu);
  
  // Close on escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && isOpen) {
      closeMenu();
    }
  });
  
  // Close menu when clicking on a link
  menuLinks?.forEach(link => {
    link.addEventListener('click', () => {
      closeMenu();
    });
  });
  
  // Handle focus trap
  menu?.addEventListener('keydown', (e) => {
    if (e.key === 'Tab') {
      const focusableElements = menu.querySelectorAll(
        'a, button, [tabindex]:not([tabindex="-1"])'
      );
      const firstElement = focusableElements[0] as HTMLElement;
      const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement;
      
      if (e.shiftKey && document.activeElement === firstElement) {
        e.preventDefault();
        lastElement.focus();
      } else if (!e.shiftKey && document.activeElement === lastElement) {
        e.preventDefault();
        firstElement.focus();
      }
    }
  });
</script>