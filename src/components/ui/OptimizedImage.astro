---
/**
 * OptimizedImage.astro
 * High-performance image component with optimization and lazy loading
 * 
 * Features:
 * - Automatic format conversion (WebP/AVIF)
 * - Responsive image generation
 * - Lazy loading with intersection observer
 * - Blur-up placeholder effect
 * - Pixel art preservation option
 */

import { Image } from 'astro:assets';

export interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  class?: string;
  loading?: 'lazy' | 'eager';
  pixelArt?: boolean;
  sizes?: string;
  priority?: boolean;
  placeholder?: 'blur' | 'none';
}

const {
  src,
  alt,
  width = 800,
  height = 600,
  class: className = '',
  loading = 'lazy',
  pixelArt = false,
  sizes = '(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw',
  priority = false,
  placeholder = 'blur'
} = Astro.props;

// Generate responsive widths
const responsiveWidths = [320, 640, 768, 1024, 1280, 1536];
const actualLoading = priority ? 'eager' : loading;

// Special handling for pixel art
const imageStyle = pixelArt ? 'image-rendering: pixelated; image-rendering: -moz-crisp-edges; image-rendering: crisp-edges;' : '';
---

{/* Optimized image with responsive srcset */}
<div class={`optimized-image-container ${className}`}>
  {src.startsWith('/') ? (
    <!-- Local images using Astro's Image component for optimization -->
    <Image
      src={src}
      alt={alt}
      width={width}
      height={height}
      loading={actualLoading}
      class={`optimized-image ${pixelArt ? 'pixel-art' : ''}`}
      style={imageStyle}
      format={pixelArt ? 'png' : 'webp'}
      quality={pixelArt ? 100 : 80}
      sizes={sizes}
      widths={responsiveWidths}
    />
  ) : (
    <!-- External images with manual optimization -->
    <img
      src={src}
      alt={alt}
      width={width}
      height={height}
      loading={actualLoading}
      class={`optimized-image ${pixelArt ? 'pixel-art' : ''}`}
      style={imageStyle}
      sizes={sizes}
    />
  )}
  
  {/* Blur placeholder for better UX */}
  {placeholder === 'blur' && (
    <div class="image-placeholder"></div>
  )}
</div>

<style>
  .optimized-image-container {
    position: relative;
    overflow: hidden;
  }

  .optimized-image {
    width: 100%;
    height: auto;
    transition: opacity 0.3s ease-in-out;
  }

  .pixel-art {
    image-rendering: pixelated;
    image-rendering: -moz-crisp-edges;
    image-rendering: crisp-edges;
  }

  .image-placeholder {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      rgba(255, 255, 255, 0.05) 25%,
      rgba(255, 255, 255, 0.1) 50%,
      rgba(255, 255, 255, 0.05) 75%
    );
    background-size: 200% 100%;
    animation: shimmer 2s infinite;
    z-index: -1;
  }

  @keyframes shimmer {
    0% {
      background-position: -200% 0;
    }
    100% {
      background-position: 200% 0;
    }
  }

  /* Hide placeholder once image is loaded */
  .optimized-image[data-loaded="true"] + .image-placeholder {
    opacity: 0;
  }

  /* Fade in effect for lazy loaded images */
  .optimized-image[loading="lazy"] {
    opacity: 0;
    transition: opacity 0.5s ease-in-out;
  }

  .optimized-image[data-loaded="true"] {
    opacity: 1;
  }

  /* Ensure images maintain aspect ratio */
  .optimized-image-container.aspect-square {
    aspect-ratio: 1;
  }

  .optimized-image-container.aspect-video {
    aspect-ratio: 16 / 9;
  }

  .optimized-image-container.aspect-banner {
    aspect-ratio: 3 / 1;
  }

  /* Responsive behavior */
  @media (max-width: 768px) {
    .optimized-image-container {
      width: 100%;
    }
  }

  /* Reduce motion for accessibility */
  @media (prefers-reduced-motion: reduce) {
    .optimized-image {
      transition: none;
    }
    
    .image-placeholder {
      animation: none;
    }
  }
</style>

<script>
  // Enhanced lazy loading with intersection observer
  function initializeImageOptimization() {
    const images = document.querySelectorAll('.optimized-image[loading="lazy"]');
    
    if ('IntersectionObserver' in window) {
      const imageObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const img = entry.target as HTMLImageElement;
            
            // Load the image
            if (img.dataset.src) {
              img.src = img.dataset.src;
            }
            
            // Mark as loaded once it's actually loaded
            img.addEventListener('load', () => {
              img.setAttribute('data-loaded', 'true');
              img.classList.add('loaded');
            }, { once: true });
            
            // Stop observing this image
            observer.unobserve(img);
          }
        });
      }, {
        rootMargin: '50px 0px',
        threshold: 0.01
      });

      images.forEach(img => imageObserver.observe(img));
    } else {
      // Fallback for browsers without IntersectionObserver
      images.forEach(img => {
        const htmlImg = img as HTMLImageElement;
        htmlImg.setAttribute('data-loaded', 'true');
      });
    }
  }

  // Initialize on DOM content loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeImageOptimization);
  } else {
    initializeImageOptimization();
  }

  // Re-initialize for dynamic content
  window.addEventListener('astro:page-load', initializeImageOptimization);
</script>